kind: Service
apiVersion: v1
metadata:
  name: prometheus-headless
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/name: prometheus
  ports:
    - name: web
      protocol: TCP
      port: 9090
      targetPort: web
    - name: grpc
      port: 10901
      targetPort: grpc
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: thanos-query
spec:
  serviceName: prometheus-headless
  podManagementPolicy: Parallel
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - prometheus
                topologyKey: kubernetes.io/hostname
              weight: 1
      containers:
        - name: prometheus
          image: quay.io/prometheus/prometheus:v2.27.1
          args:
            - --config.file=/etc/prometheus/config_out/prometheus.yaml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention.time=2d
            - --web.route-prefix=/
            - --web.enable-lifecycle
            - --storage.tsdb.no-lockfile
            - --storage.tsdb.min-block-duration=2h
            - --storage.tsdb.max-block-duration=2h
            - --log.level=debug
          ports:
            - containerPort: 9090
              name: web
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /-/healthy
              port: web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 120
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          volumeMounts:
            - mountPath: /etc/prometheus/config_out
              name: prometheus-config-out
              readOnly: true
            - mountPath: /prometheus
              name: prometheus-storage
            - mountPath: /etc/prometheus/rules
              name: prometheus-rules
        - name: thanos
          image: quay.io/thanos/thanos:v0.11.0
          args:
            - sidecar
            - --log.level=debug
            - --tsdb.path=/prometheus
            - --prometheus.url=http://127.0.0.1:9090
            - --objstore.config-file=/etc/thanos/objectstorage.yaml
            - --reloader.config-file=/etc/prometheus/config/prometheus.yaml
            - --reloader.config-envsubst-file=/etc/prometheus/config_out/prometheus.yaml
            - --reloader.rule-dir=/etc/prometheus/rules/
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: http-sidecar
              containerPort: 10902
            - name: grpc
              containerPort: 10901
          livenessProbe:
            httpGet:
              port: 10902
              path: /-/healthy
          readinessProbe:
            httpGet:
              port: 10902
              path: /-/ready
          volumeMounts:
            - name: prometheus-config-tmpl
              mountPath: /etc/prometheus/config
            - name: prometheus-config-out
              mountPath: /etc/prometheus/config_out
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: prometheus-storage
              mountPath: /prometheus
            - name: thanos-objectstorage
              subPath: objectstorage.yaml
              mountPath: /etc/thanos/objectstorage.yaml
      volumes:
        - name: prometheus-config-tmpl
          configMap:
            defaultMode: 420
            name: prometheus-config
        - name: prometheus-config-out
          emptyDir: {}
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
        - name: thanos-objectstorage
          secret:
            secretName: thanos-objectstorage
  volumeClaimTemplates:
    - metadata:
        name: prometheus-storage
        namespace: monitoring
        labels:
          app.kubernetes.io/name: prometheus
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 200Gi
        storageClassName: alicloud-nas-fs
        volumeMode: Filesystem
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: alicloud-nas-fs
mountOptions:
  - nolock,tcp,noresvport
  - vers=3
parameters:
  volumeAs: filesystem
  # 选Performance及Capacity两种类型，分别表示性能型、容量型。默认为性能型
  storageType: "Capacity"
  vpcId: "vpc-xxxxxxxxxxxx"
  vSwitchId: "vsw-xxxxxxxxx"
  deleteVolume: "false"
provisioner: nasplugin.csi.alibabacloud.com
reclaimPolicy: Retain